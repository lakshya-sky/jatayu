use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::time::Duration;

#[derive(Default, Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "PascalCase")]
pub struct Local {
    pub version: u32,
    pub archival: bool,
    pub gossip_fanout: i32,
    pub net_address: String,
    pub reconnect_time: Duration,
    pub public_address: String,
    pub max_connections_per_ip: i32,
    pub peer_ping_period_seconds: i32,
    pub tls_cert_file: String,
    pub tls_key_file: String,
    pub base_logger_debug_level: u32,
    pub cadaver_size_target: u32,
    pub incoming_connections_limit: i32,
    pub broadcast_connections_limit: i32,
    pub announce_participation_key: bool,
    pub priority_peers: HashMap<String, bool>,
    pub reserved_f_ds: u32,
    pub endpoint_address: String,
    pub rest_read_timeout_seconds: i32,
    pub rest_write_timeout_seconds: i32,
    pub dns_bootstrap_id: String,
    pub log_size_limit: u32,
    pub log_archive_name: String,
    pub log_archive_max_age: String,
    pub catchup_failure_peer_refresh_rate: i32,
    pub node_exporter_listen_address: String,
    pub enable_metric_reporting: bool,
    pub enable_top_accounts_reporting: bool,
    pub enable_agreement_reporting: bool,
    pub enable_agreement_time_metrics: bool,
    pub node_exporter_path: String,
    pub fallback_dns_resolver_address: String,
    pub tx_pool_exponential_increase_factor: u32,
    pub suggested_fee_block_history: i32,
    pub tx_pool_size: i32,
    pub tx_sync_timeout_seconds: i64,
    pub tx_sync_interval_seconds: i64,
    pub incoming_message_filter_bucket_count: i32,
    pub incoming_message_filter_bucket_size: i32,
    pub outgoing_message_filter_bucket_count: i32,
    pub outgoing_message_filter_bucket_size: i32,
    pub enable_outgoing_network_message_filtering: bool,
    pub enable_incoming_message_filter: bool,
    pub deadlock_detection: i32,
    pub deadlock_detection_threshold: i32,
    pub run_hosted: bool,
    pub catchup_parallel_blocks: u32,
    pub enable_assemble_stats: bool,
    pub enable_process_block_stats: bool,
    pub suggested_fee_sliding_window_size: u32,
    pub tx_sync_serve_response_size: i32,
    pub is_indexer_active: bool,
    pub use_x_forwarded_for_address_field: String,
    pub force_relay_messages: bool,
    pub connections_rate_limiting_window_seconds: u32,
    pub connections_rate_limiting_count: u32,
    pub enable_request_logger: bool,
    pub peer_connections_update_interval: i32,
    pub enable_profiler: bool,
    pub enable_runtime_metrics: bool,
    pub telemetry_to_log: bool,
    pub dns_security_flags: u32,
    pub enable_ping_handler: bool,
    pub disable_outgoing_connection_throttling: bool,
    pub network_protocol_version: String,
    pub catchpoint_interval: u32,
    pub catchpoint_file_history_length: i32,
    pub enable_ledger_service: bool,
    pub enable_block_service: bool,
    pub enable_gossip_block_service: bool,
    pub catchup_http_block_fetch_timeout_sec: i32,
    pub catchup_gossip_block_fetch_timeout_sec: i32,
    pub catchup_ledger_download_retry_attempts: i32,
    pub catchup_block_download_retry_attempts: i32,
    pub enable_developer_api: bool,
    pub optimize_accounts_database_on_startup: bool,
    pub catchpoint_tracking: i64,
    pub ledger_synchronous_mode: i32,
    pub accounts_rebuild_synchronous_mode: i32,
    pub max_catchpoint_download_duration: Duration,
    pub min_catchpoint_file_download_bytes_per_second: u32,
    pub network_message_trace_server: String,
    pub verified_transcations_cache_size: i32,
    pub enable_catchup_from_archive_servers: bool,
    pub disable_localhost_connection_rate_limit: bool,
    pub block_service_custom_fallback_endpoints: String,
    pub enable_block_service_fallback_to_archiver: bool,
    pub catchup_block_validate_mode: i32,
    pub enable_account_updates_stats: bool,
    pub account_updates_stats_interval: Duration,
    pub participation_keys_refresh_interval: Duration,
    pub disable_networking: bool,
    pub force_fetch_transactions: bool,
    pub enable_verbosed_transaction_sync_logging: bool,
    pub transaction_sync_data_exchange_rate: u32,
    pub transaction_sync_significant_message_threshold: u32,
    pub proposal_assembly_time: Duration,
    pub rest_connections_soft_limit: u32,
    pub rest_connections_hard_limit: u32,
    pub max_api_resources_per_account: u32,
    pub agreement_incoming_votes_queue_length: u32,
    pub agreement_incoming_proposals_queue_length: u32,
    pub agreement_incoming_bundles_queue_length: u32,
}

pub fn default_local() -> Local {
    Local {
        version: 22,
        account_updates_stats_interval: Duration::from_nanos(5000000000),
        accounts_rebuild_synchronous_mode: 1,
        agreement_incoming_bundles_queue_length: 7,
        agreement_incoming_proposals_queue_length: 25,
        agreement_incoming_votes_queue_length: 10000,
        announce_participation_key: true,
        archival: false,
        base_logger_debug_level: 4,
        block_service_custom_fallback_endpoints: "".to_string(),
        broadcast_connections_limit: -1,
        cadaver_size_target: 1073741824,
        catchpoint_file_history_length: 365,
        catchpoint_interval: 10000,
        catchpoint_tracking: 0,
        catchup_block_download_retry_attempts: 1000,
        catchup_block_validate_mode: 0,
        catchup_failure_peer_refresh_rate: 10,
        catchup_gossip_block_fetch_timeout_sec: 4,
        catchup_http_block_fetch_timeout_sec: 4,
        catchup_ledger_download_retry_attempts: 50,
        catchup_parallel_blocks: 16,
        connections_rate_limiting_count: 60,
        connections_rate_limiting_window_seconds: 1,
        dns_bootstrap_id: "<network>.algorand.network".to_string(),
        dns_security_flags: 1,
        deadlock_detection: 0,
        deadlock_detection_threshold: 30,
        disable_localhost_connection_rate_limit: true,
        disable_networking: false,
        disable_outgoing_connection_throttling: false,
        enable_account_updates_stats: false,
        enable_agreement_reporting: false,
        enable_agreement_time_metrics: false,
        enable_assemble_stats: false,
        enable_block_service: false,
        enable_block_service_fallback_to_archiver: true,
        enable_catchup_from_archive_servers: false,
        enable_developer_api: false,
        enable_gossip_block_service: true,
        enable_incoming_message_filter: false,
        enable_ledger_service: false,
        enable_metric_reporting: false,
        enable_outgoing_network_message_filtering: true,
        enable_ping_handler: true,
        enable_process_block_stats: false,
        enable_profiler: false,
        enable_request_logger: false,
        enable_runtime_metrics: false,
        enable_top_accounts_reporting: false,
        enable_verbosed_transaction_sync_logging: false,
        endpoint_address: "127.0.0.1:0".to_string(),
        fallback_dns_resolver_address: "".to_string(),
        force_fetch_transactions: false,
        force_relay_messages: false,
        gossip_fanout: 4,
        incoming_connections_limit: 800,
        incoming_message_filter_bucket_count: 5,
        incoming_message_filter_bucket_size: 512,
        is_indexer_active: false,
        ledger_synchronous_mode: 2,
        log_archive_max_age: "".to_string(),
        log_archive_name: "node.archive.log".to_string(),
        log_size_limit: 1073741824,
        max_api_resources_per_account: 100000,
        max_catchpoint_download_duration: Duration::from_nanos(7200000000000),
        max_connections_per_ip: 30,
        min_catchpoint_file_download_bytes_per_second: 20480,
        net_address: "".to_string(),
        network_message_trace_server: "".to_string(),
        network_protocol_version: "".to_string(),
        node_exporter_listen_address: ":9100".to_string(),
        node_exporter_path: "./node_exporter".to_string(),
        optimize_accounts_database_on_startup: false,
        outgoing_message_filter_bucket_count: 3,
        outgoing_message_filter_bucket_size: 128,
        participation_keys_refresh_interval: Duration::from_nanos(60000000000),
        peer_connections_update_interval: 3600,
        peer_ping_period_seconds: 0,
        priority_peers: HashMap::<String, bool>::new(),
        proposal_assembly_time: Duration::from_nanos(250000000),
        public_address: "".to_string(),
        reconnect_time: Duration::from_nanos(60000000000),
        reserved_f_ds: 256,
        rest_connections_hard_limit: 2048,
        rest_connections_soft_limit: 1024,
        rest_read_timeout_seconds: 15,
        rest_write_timeout_seconds: 120,
        run_hosted: false,
        suggested_fee_block_history: 3,
        suggested_fee_sliding_window_size: 50,
        tls_cert_file: "".to_string(),
        tls_key_file: "".to_string(),
        telemetry_to_log: true,
        transaction_sync_data_exchange_rate: 0,
        transaction_sync_significant_message_threshold: 0,
        tx_pool_exponential_increase_factor: 2,
        tx_pool_size: 15000,
        tx_sync_interval_seconds: 60,
        tx_sync_serve_response_size: 1000000,
        tx_sync_timeout_seconds: 30,
        use_x_forwarded_for_address_field: "".to_string(),
        verified_transcations_cache_size: 30000,
    }
}
